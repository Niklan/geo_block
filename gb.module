<?php

/*
 * @file
 * Geo Block - Creates a block, in which the data are derived based on the geographical location of the visitor.
 */

define('GB_DEFAULT_GEOSERVICE', 'ipgeobase');
define('GB_DEFAULT_BLOCKS_COUNT', 1);

/**
 * Implements hook_menu()
 */
function gb_menu() {
    $items = array();
    $items['admin/config/user-interface/gb'] = array(
        'title' => 'Geo Block',
        'type' => MENU_NORMAL_ITEM,
        'description' => 'Creates a block, in which the data are derived based on the geographical location of the visitor.',
        'page callback' => 'gb_settings_page',
        'page arguments' => array('gb_settings_form'),
        'access arguments' => array('administer site configuration'),
        'file' => 'gb_settings_form.inc',
    );
    $items['admin/config/user-interface/gb/main'] = array(
        'title' => 'All blocks',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'page callback' => 'gb_settings_page',
        'page arguments' => array('gb_settings_form'),
        'access arguments' => array('administer site configuration'),
    );
    $items['admin/config/user-interface/gb/settings'] = array(
        'title' => 'Module settings',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('gb_module_settings'),
        'access arguments' => array('administer site configuration'),
        'file' => 'gb_settings_form.inc',
    );
    $items['admin/config/user-interface/gb/edit'] = array(
        'title' => 'Edit geo block',
        'type' => MENU_CALLBACK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('gb_edit_block'),
        'access arguments' => array('administer site configuration'),
        'file' => 'gb_settings_form.inc',
    );

    return $items;
}

/**
 * Implements hook_block_info().
 */
function gb_block_info() {
    $blocks = array();
    $count = variable_get('gb_blocks_count', GB_DEFAULT_BLOCKS_COUNT);
    for ($i = 1; $i <= $count; $i++) {
        $blocks['gb_block_n' . $i] = array(
            'info' => t('Geo Block #@num', array('@num' => $i)),
            'cache' => DRUPAL_NO_CACHE,
        );
    }

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function gb_block_view($delta = '') {
    $count = variable_get('gb_blocks_count', GB_DEFAULT_BLOCKS_COUNT);
    $block = array();
    for ($i = 1; $i <= $count; $i++) {
        switch ($delta) {
            case 'gb_block_n' . $i:
                $block['subject'] = gb_block_generate_subject($i);
                $block['content'] = gb_block_generate_content($i);
        }
    }

    return $block;
}

/**
 * @param string $geo_service
 *    Geo service to be used to determine the user's location.
 * @param string $ip
 *    Own IP address that will be determined by the location
 */
function gb_get_user_city($geo_service = '', $ip = '') {
    if (empty($geo_service)) {
        $geo_service = variable_get('gb_geo_service', GB_DEFAULT_GEOSERVICE);
    }
    if (empty($ip)) {
        $ip = gb_get_user_ip();
    }

    if (!isset($_COOKIE['gb_user_city'])) {
        switch ($geo_service) {
            case 'ipgeobase':
                $content = gb_get_user_city_ipgeobase($ip);
                break;
        }
        setcookie("gb_user_city", strtolower($content));
    } else {
        $content = urldecode($_COOKIE['gb_user_city']);
    }
    
    return $content;
}

/**
 * Generate subject for block
 */
function gb_block_generate_subject($block_num = 1) {
    $cities_in_block = variable_get('block_' . $block_num . '_cities', 1);
    $subject = '';
    $user_city = strtolower(gb_get_user_city());
    for ($c = 1; $c <= $cities_in_block; $c++) {
        $curr_city = strtolower(variable_get('block_' . $block_num . '_city_' . $c . '_city_name'));
        if ($curr_city == $user_city) {
            $subject = variable_get('block_' . $block_num . '_city_' . $c . '_subject');
            if ($subject == '' || $subject == '<none>') {
                $subject = variable_get('block_' . $block_num . '_default_subject');
            }
        }
    }

    return $subject;
}

/**
 * Prepare content to display
 */
function gb_block_generate_content($block_num = 1) {
    $cities_in_block = variable_get('block_' . $block_num . '_cities', 1);
    $user_city = strtolower(gb_get_user_city());
    for ($c = 1; $c <= $cities_in_block; $c++) {
        $curr_city = strtolower(variable_get('block_' . $block_num . '_city_' . $c . '_city_name'));
        if ($curr_city == $user_city) {
            $content_plain = variable_get('block_' . $block_num . '_city_' . $c . '_content');
            $format = variable_get('block_' . $block_num . '_city_' . $c . '_content_format');
            $content = check_markup($content_plain, $format, $langcode = '', $cache = FALSE);
            break;
        } else {
            $content_plain = variable_get('block_' . $block_num . '_default_content');
            $format = variable_get('block_' . $block_num . '_default_content_format');
            $content = check_markup($content_plain, $format, $langcode = '', $cache = FALSE);
        }
    }

    return $content;
}

/**
 * Get user ip
 * You can send fake parameters for debugging and verification.
 * gb_fake_ip - send fake IP
 * Exmp. http://localhost/?gb_fake_ip=127.0.0.1
 */
function gb_get_user_ip() {
    if (isset($_GET['gb_fake_ip'])) {
        $ip = $_GET['gb_fake_ip'];
    } else {
        $ip = $_SERVER['REMOTE_ADDR'];
    }

    return $ip;
}

/**
 * Get user location with service ipgeobase.ru
 * @param string $ip
 *  - IP to locate
 */
function gb_get_user_city_ipgeobase($ip = '127.0.0.1') {
    if ($ip = '127.0.0.1') {
        $ip = '37.112.119.248'; // Пермь - Perm'
    }
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "http://ipgeobase.ru:7020/geo?ip={$ip}");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    $result = curl_exec($ch);
    curl_close($ch);

    $location = (array) simplexml_load_string($result);
    $user_city = $location['ip']->city;

    return $user_city;
}

/**
 * Implements hook_page_build(&$page)
 * @param type $page
 * 
 * This function prepares a list of cities used in the module that JavaScript could use it.
 */
function gb_page_build(&$page) {
    $block_count = variable_get('gb_blocks_count', GB_DEFAULT_BLOCKS_COUNT);
    $cities = array();
    for ($b = 1; $b <= $block_count; $b++) {
        $cities_in_block = variable_get('block_' . $b . '_cities', 1);
        for ($c = 1; $c <= $cities_in_block; $c++) {
            $curr_city = strtolower(variable_get('block_' . $b . '_city_' . $c . '_city_name'));
            if (!in_array($curr_city, $cities)) {
                $cities[] .= $curr_city;
            }
        }
    }
    $user_city = gb_get_user_city();
    $text = t('Your location');

    drupal_add_js(array('cities' => $cities), 'setting');
    drupal_add_js(array('user_city' => $user_city), 'setting');
    drupal_add_js(array('text' => $text), 'setting');
    drupal_add_js(array('gb_top_toolbar_enabled' => variable_get('gb_top_toolbar_enabled', 0)), 'setting');
    drupal_add_js(array('gb_top_toolbar_usecookie' => variable_get('gb_top_toolbar_usecookie', 0)), 'setting');
    drupal_add_js(array('gb_top_toolbar_bgcolor' => variable_get('gb_top_toolbar_bgcolor', '#FEF0D5')), 'setting');
    drupal_add_js(drupal_get_path('module', 'gb') . '/gb_city_select.js');
}