<?php
/**
 * @file
 * Main module file.
 */

define('GB_DEFAULT_GEOSERVICE', 'ipgeobase');

/**
 * Implements hook_menu().
 */
function gb_menu() {
  $items['admin/structure/block/geoblock_add'] = array(
    'title' => 'Add geo block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gb_add_block_form'),
    'access arguments' => array('administer blocks'),
    'file' => 'gb.block_forms.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/structure/block/gb_configure'] = array(
    'title' => 'Geo block settings',
    'description' => 'Configure Geo block settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gb_module_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'gb.admin.inc',
  );
  $items['admin/structure/block/manage/gb/%/delete'] = array(
    'title' => 'Delete block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gb_delete_block', 5),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'gb.block_forms.inc',
  );
  $items['admin/structure/block/manage/gb/%/configure'] = array(
    'title' => 'Configure block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gb_edit_block_form', 5),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'gb.block_forms.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 *
 * Display all added geo blocks from database in /admin/structure/block.
 */
function gb_block_info() {
  $blocks = array();

  $result = db_query('SELECT bid, info FROM {geoblock} ORDER BY info');
  foreach ($result as $block) {
    $blocks[$block->bid]['info'] = "Geo Block: " . $block->info;
    $blocks[$block->bid]['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}

/**
 * Implements hook_form_alter().
 *
 * Add 'Delete' link to block administration page.
 */
function gb_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'block_admin_display_form') {
    foreach ($form['blocks'] as $key => $element) {
      if ($element['module']['#value'] == 'gb') {
        $form['blocks'][$key]['delete'] = array(
          '#type' => 'link',
          '#title' => t('delete'),
          '#href' => 'admin/structure/block/manage/gb/' . $element['delta']['#value'] . '/delete',
        );
      }
    }
  }
}

/**
 * Returns information from database about geo block.
 */
function gb_block_get($bid) {
  return db_query("SELECT * FROM {geoblock} WHERE bid = :bid", array(':bid' => $bid))->fetchAssoc();
}

/**
 * Implements hook_block_view().
 */
function gb_block_view($delta = '') {
  $data = gb_block_generate_data($delta);
  $block['subject'] = $data['subject'];
  $block['content'] = $data['content'];

  return $block;
}

/**
 * The function receives the user's city.
 *
 * @param string $geo_service
 *   Geo service to be used to determine the user's location.
 * @param string $ip
 *   Own IP address that will be determined by the location.
 */
function gb_get_user_city($geo_service = '', $ip = '') {
  if (empty($geo_service)) {
    $geo_service = variable_get('gb_geo_service', GB_DEFAULT_GEOSERVICE);
  }
  if (empty($ip)) {
    $ip = ip_address();
  }
  if (!isset($_COOKIE['gb_user_city'])) {
    switch ($geo_service) {
      case 'ipgeobase':
        $content = gb_get_user_city_ipgeobase($ip);
        break;

      case 'hostip':
        $content = gb_get_user_city_hostip($ip);
        break;
    }
    setcookie("gb_user_city", strtolower($content));
  }
  else {
    $content = urldecode($_COOKIE['gb_user_city']);
  }

  return $content;
}

/**
 * Generate subject and content for block.
 */
function gb_block_generate_data($delta = 1) {
  $block = gb_block_get($delta);
  $cities_data = unserialize($block['data']);
  if (count($cities_data) == 2) {
    $cities_in_block = 1;
  }
  else {
    $cities_in_block = count($cities_data) - 2;
  }
  $subject = NULL;
  $content = NULL;
  $result = array();
  $user_city = strtolower(gb_get_user_city());
  for ($i = 1; $i <= $cities_in_block; $i++) {
    if ($cities_data[$i]['cities'] == $user_city) {
      $subject = !empty($cities_data[$i]['block_title']) ? $cities_data[$i]['block_title'] : $block['default_title'];
      $content_data = !empty($cities_data[$i]['block_content']['value']) ? $cities_data[$i]['block_content']['value'] : $block['default_body'];
      $content_format = !empty($cities_data[$i]['block_content']['format']) ? $cities_data[$i]['block_content']['format'] : $block['default_format'];
      $content = check_markup($content_data, $content_format, $langcode = '', $cache = FALSE);
    }
  }
  if ((empty($subject)) and (empty($content))) {
    $subject = !empty($block['default_title']) ? $block['default_title'] : NULL;
    $content_data = !empty($block['default_body']) ? $block['default_body'] : NULL;
    $content_format = !empty($block['default_format']) ? $block['default_format'] : NULL;
    $content = check_markup($content_data, $content_format, $langcode = '', $cache = FALSE);
  }
  $result['subject'] = $subject;
  $result['content'] = $content;

  return $result;
}

/**
 * Get user location with service http://ipgeobase.ru/.
 *
 * @param string $ip
 *   IP to locate.
 */
function gb_get_user_city_ipgeobase($ip = '127.0.0.1') {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, "http://ipgeobase.ru:7020/geo?ip={$ip}");
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  $result = curl_exec($ch);
  curl_close($ch);

  $location = (array) simplexml_load_string($result);
  $user_city = $location['ip']->city;

  return $user_city;
}

/**
 * Get user location with service http://hostip.info/.
 *
 * @param string $ip
 *   IP to locate.
 */
function gb_get_user_city_hostip($ip = '127.0.0.1') {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, "http://api.hostip.info/get_json.php?ip={$ip}");
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  $result = curl_exec($ch);
  curl_close($ch);

  $location = json_decode($result);
  $user_city = $location->city;

  return $user_city;
}

/**
 * Implements hook_page_build().
 */
function gb_page_build(&$page) {
  $blocks_data = db_select('geoblock', 'g')
      ->fields('g')
      ->execute();
  foreach ($blocks_data as $block) {
    $blocks[] = $block;
  }
  $cities = array();
  for ($b = 0; $b < count($blocks); $b++) {
    $block = gb_block_get($blocks[$b]->bid);
    $cities_data = unserialize($blocks[$b]->data);
    if (count($cities_data) == 2) {
      $cities_in_block = 1;
    }
    else {
      $cities_in_block = count($cities_data) - 2;
    }
    for ($c = 1; $c <= $cities_in_block; $c++) {
      $curr_city = $cities_data[$c]['cities'];
      if (!in_array(strtolower($curr_city), $cities)) {
        $cities[] .= $curr_city;
      }
    }
  }
  $user_city = gb_get_user_city();
  $text = t('Your location');

  drupal_add_js(array('cities' => $cities), 'setting');
  drupal_add_js(array('user_city' => $user_city), 'setting');
  drupal_add_js(array('text' => $text), 'setting');
  drupal_add_js(array('gb_top_toolbar_enabled' => variable_get('gb_top_toolbar_enabled', 0)), 'setting');
  drupal_add_js(array('gb_top_toolbar_usecookie' => variable_get('gb_top_toolbar_usecookie', 0)), 'setting');
  drupal_add_js(array('gb_top_toolbar_bgcolor' => variable_get('gb_top_toolbar_bgcolor', '#FEF0D5')), 'setting');
  drupal_add_js(array('gb_placeholder_enabled' => variable_get('gb_placeholder_enabled', 0)), 'setting');
  drupal_add_js(drupal_get_path('module', 'gb') . '/gb_city_select.js');
}
